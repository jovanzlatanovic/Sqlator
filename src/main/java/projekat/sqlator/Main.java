/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projekat.sqlator;

import java.awt.Desktop;
import java.awt.event.WindowEvent;
import java.net.URI;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TableModelEvent;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import projekat.sqlator.DataHandler;

/**
 *
 * @author tesla
 */
public class Main extends javax.swing.JFrame {

    private String WORKING_PATH;
    private String SELECTED_TABLE;
    private boolean CHANGES = false;
    
    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        setLocationRelativeTo(null);
        
        
        
        Tree_Table.addTreeSelectionListener((TreeSelectionEvent e) ->
        {
            DefaultMutableTreeNode selectedNode = (DefaultMutableTreeNode) Tree_Table.getLastSelectedPathComponent();
            if (checkTableSelected(selectedNode))
                fillTableContents(selectedNode.getUserObject().toString());
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        Panel_WorkArea = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        Tree_Table = new javax.swing.JTree();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_DatabaseContent = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jTextField_search = new javax.swing.JTextField();
        ToolBar_Database = new javax.swing.JToolBar();
        Button_NewDatabase = new javax.swing.JButton();
        jSeparator10 = new javax.swing.JToolBar.Separator();
        Button_OpenDatabase = new javax.swing.JButton();
        jSeparator11 = new javax.swing.JToolBar.Separator();
        Button_CloseDatabase = new javax.swing.JButton();
        ToolBar_Table = new javax.swing.JToolBar();
        Button_NewTable = new javax.swing.JButton();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        Button_ModifyTable = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JToolBar.Separator();
        Button_deleteTable = new javax.swing.JButton();
        ToolBar_TableData = new javax.swing.JToolBar();
        Button_NewRow = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        Button_DeleteRow = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        Button_WriteData = new javax.swing.JButton();
        statusBar = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        Label_Status = new javax.swing.JLabel();
        MenuBar = new javax.swing.JMenuBar();
        jMenu_File = new javax.swing.JMenu();
        jMenuItem_NewDatabase = new javax.swing.JMenuItem();
        jMenuItem_NewDatabaseFromSQL = new javax.swing.JMenuItem();
        jMenuItem_OpenDatabase = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem8 = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItem_Exit = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenuItem7 = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jMenuItem9 = new javax.swing.JMenuItem();
        jMenu_View = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenu_Help = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sqlator");
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                formWindowClosing(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Open a database");
        Tree_Table.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        Tree_Table.setSelectionRow(0);
        Tree_Table.setSelectionRows(new int[] {});
        jScrollPane2.setViewportView(Tree_Table);

        jTable_DatabaseContent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {

            },
            new String []
            {

            }
        ));
        jScrollPane1.setViewportView(jTable_DatabaseContent);

        jLabel1.setText("Search: ");

        jTextField_search.addKeyListener(new java.awt.event.KeyAdapter()
        {
            public void keyReleased(java.awt.event.KeyEvent evt)
            {
                jTextField_searchKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout Panel_WorkAreaLayout = new javax.swing.GroupLayout(Panel_WorkArea);
        Panel_WorkArea.setLayout(Panel_WorkAreaLayout);
        Panel_WorkAreaLayout.setHorizontalGroup(
            Panel_WorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Panel_WorkAreaLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel_WorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Panel_WorkAreaLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField_search, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        Panel_WorkAreaLayout.setVerticalGroup(
            Panel_WorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
            .addGroup(Panel_WorkAreaLayout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Panel_WorkAreaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        ToolBar_Database.setFloatable(false);
        ToolBar_Database.setRollover(true);

        Button_NewDatabase.setText("  Create new database  ");
        Button_NewDatabase.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Button_NewDatabase.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Button_NewDatabaseActionPerformed(evt);
            }
        });
        ToolBar_Database.add(Button_NewDatabase);
        ToolBar_Database.add(jSeparator10);

        Button_OpenDatabase.setText("  Open database  ");
        Button_OpenDatabase.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Button_OpenDatabase.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Button_OpenDatabaseActionPerformed(evt);
            }
        });
        ToolBar_Database.add(Button_OpenDatabase);
        ToolBar_Database.add(jSeparator11);

        Button_CloseDatabase.setText("  Close database  ");
        Button_CloseDatabase.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Button_CloseDatabase.setEnabled(false);
        Button_CloseDatabase.setFocusable(false);
        Button_CloseDatabase.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Button_CloseDatabase.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Button_CloseDatabase.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Button_CloseDatabaseActionPerformed(evt);
            }
        });
        ToolBar_Database.add(Button_CloseDatabase);

        ToolBar_Table.setFloatable(false);
        ToolBar_Table.setRollover(true);

        Button_NewTable.setText("  New Table  ");
        Button_NewTable.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Button_NewTable.setEnabled(false);
        Button_NewTable.setFocusable(false);
        Button_NewTable.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Button_NewTable.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Button_NewTable.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Button_NewTableActionPerformed(evt);
            }
        });
        ToolBar_Table.add(Button_NewTable);
        ToolBar_Table.add(jSeparator8);

        Button_ModifyTable.setText("  Modify table  ");
        Button_ModifyTable.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Button_ModifyTable.setEnabled(false);
        Button_ModifyTable.setFocusable(false);
        Button_ModifyTable.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Button_ModifyTable.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Button_ModifyTable.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Button_ModifyTableActionPerformed(evt);
            }
        });
        ToolBar_Table.add(Button_ModifyTable);
        ToolBar_Table.add(jSeparator9);

        Button_deleteTable.setText("  Delete table  ");
        Button_deleteTable.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Button_deleteTable.setEnabled(false);
        Button_deleteTable.setFocusable(false);
        Button_deleteTable.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Button_deleteTable.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Button_deleteTable.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Button_deleteTableActionPerformed(evt);
            }
        });
        ToolBar_Table.add(Button_deleteTable);

        ToolBar_TableData.setFloatable(false);
        ToolBar_TableData.setRollover(true);

        Button_NewRow.setText("  New row  ");
        Button_NewRow.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Button_NewRow.setEnabled(false);
        Button_NewRow.setFocusable(false);
        Button_NewRow.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Button_NewRow.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Button_NewRow.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Button_NewRowActionPerformed(evt);
            }
        });
        ToolBar_TableData.add(Button_NewRow);

        jSeparator6.setMinimumSize(new java.awt.Dimension(0, 6));
        ToolBar_TableData.add(jSeparator6);

        Button_DeleteRow.setText("  Delete row  ");
        Button_DeleteRow.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Button_DeleteRow.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Button_DeleteRow.setEnabled(false);
        Button_DeleteRow.setFocusable(false);
        Button_DeleteRow.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Button_DeleteRow.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Button_DeleteRow.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Button_DeleteRowActionPerformed(evt);
            }
        });
        ToolBar_TableData.add(Button_DeleteRow);
        ToolBar_TableData.add(jSeparator7);

        Button_WriteData.setText("   Save data  ");
        Button_WriteData.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Button_WriteData.setEnabled(false);
        Button_WriteData.setFocusable(false);
        Button_WriteData.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        Button_WriteData.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        Button_WriteData.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                Button_WriteDataActionPerformed(evt);
            }
        });
        ToolBar_TableData.add(Button_WriteData);

        javax.swing.GroupLayout statusBarLayout = new javax.swing.GroupLayout(statusBar);
        statusBar.setLayout(statusBarLayout);
        statusBarLayout.setHorizontalGroup(
            statusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1)
            .addGroup(statusBarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Label_Status)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        statusBarLayout.setVerticalGroup(
            statusBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusBarLayout.createSequentialGroup()
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Label_Status)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        jMenu_File.setText("File");

        jMenuItem_NewDatabase.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_NewDatabase.setText("New database");
        jMenuItem_NewDatabase.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem_NewDatabaseActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_NewDatabase);

        jMenuItem_NewDatabaseFromSQL.setText("New database from SQL");
        jMenuItem_NewDatabaseFromSQL.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem_NewDatabaseFromSQLActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_NewDatabaseFromSQL);

        jMenuItem_OpenDatabase.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_OpenDatabase.setText("Open database");
        jMenuItem_OpenDatabase.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem_OpenDatabaseActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_OpenDatabase);
        jMenu_File.add(jSeparator2);

        jMenuItem8.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem8.setText("Save data");
        jMenuItem8.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem8ActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem8);
        jMenu_File.add(jSeparator4);

        jMenuItem_Exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem_Exit.setText("Exit");
        jMenuItem_Exit.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem_ExitActionPerformed(evt);
            }
        });
        jMenu_File.add(jMenuItem_Exit);

        MenuBar.add(jMenu_File);

        jMenu1.setText("Edit");

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_INSERT, 0));
        jMenuItem6.setText("New row");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        jMenuItem7.setText("Delete row");
        jMenuItem7.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem7ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem7);
        jMenu1.add(jSeparator5);

        jMenuItem9.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem9.setText("Find");
        jMenuItem9.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem9ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem9);

        MenuBar.add(jMenu1);

        jMenu_View.setText("View");

        jMenuItem1.setText("Database toolbar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu_View.add(jMenuItem1);

        jMenuItem2.setText("Table toolbar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu_View.add(jMenuItem2);

        jMenuItem3.setText("Row editing toolbar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu_View.add(jMenuItem3);

        MenuBar.add(jMenu_View);

        jMenu_Help.setText("Help");

        jMenuItem5.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jMenuItem5.setText("Sqlator GitLab page");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu_Help.add(jMenuItem5);
        jMenu_Help.add(jSeparator3);

        jMenuItem4.setText("About");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu_Help.add(jMenuItem4);

        MenuBar.add(jMenu_Help);

        setJMenuBar(MenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ToolBar_Database, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ToolBar_Table, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ToolBar_TableData, javax.swing.GroupLayout.PREFERRED_SIZE, 570, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(Panel_WorkArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(ToolBar_Database, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(ToolBar_Table, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                    .addComponent(ToolBar_TableData, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Panel_WorkArea, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(statusBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Button_NewDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_NewDatabaseActionPerformed
        createNewDatabase(false);
    }//GEN-LAST:event_Button_NewDatabaseActionPerformed

    private void Button_OpenDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Button_OpenDatabaseActionPerformed
        openDatabase();
    }//GEN-LAST:event_Button_OpenDatabaseActionPerformed

    private void Button_CloseDatabaseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Button_CloseDatabaseActionPerformed
    {//GEN-HEADEREND:event_Button_CloseDatabaseActionPerformed
        closeDatabase();
    }//GEN-LAST:event_Button_CloseDatabaseActionPerformed

    private void Button_NewTableActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Button_NewTableActionPerformed
    {//GEN-HEADEREND:event_Button_NewTableActionPerformed
        JDialogNewTable newTableForm = new JDialogNewTable(this, true, WORKING_PATH, false, null);
        newTableForm.showDialog();
        fillTableView();
    }//GEN-LAST:event_Button_NewTableActionPerformed

    private void Button_deleteTableActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Button_deleteTableActionPerformed
    {//GEN-HEADEREND:event_Button_deleteTableActionPerformed
        if (!checkTableSelected((DefaultMutableTreeNode) Tree_Table.getLastSelectedPathComponent()))
            return;

        String selectedTable = Tree_Table.getLastSelectedPathComponent().toString();
        int result = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete table '" + selectedTable + "'?\nAll data and fields inside this table will be lost.", "Delete table", 0);
        
        if (result == 0)
        {
            if (DataHandler.dropTable(WORKING_PATH, selectedTable))
            {
                JOptionPane.showMessageDialog(this, "Successfully deleted the table", "Delete table", 1);
                fillTableView();
            }
            else
            {
                JOptionPane.showMessageDialog(this, "Error deleting the table", "Delete table", 0);
            }
        }
    }//GEN-LAST:event_Button_deleteTableActionPerformed

    private void Button_ModifyTableActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Button_ModifyTableActionPerformed
    {//GEN-HEADEREND:event_Button_ModifyTableActionPerformed
        if (!checkTableSelected((DefaultMutableTreeNode) Tree_Table.getLastSelectedPathComponent()))
            return;
        
        String selectedTable = Tree_Table.getLastSelectedPathComponent().toString();
        
        JDialogNewTable modifyTableForm = new JDialogNewTable(this, true, WORKING_PATH, true, selectedTable);
        modifyTableForm.showDialog();
        
        fillTableContents(selectedTable);
        fillTableView();
    }//GEN-LAST:event_Button_ModifyTableActionPerformed

    private void Button_NewRowActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Button_NewRowActionPerformed
    {//GEN-HEADEREND:event_Button_NewRowActionPerformed
        insertRow();
    }//GEN-LAST:event_Button_NewRowActionPerformed

    private void Button_DeleteRowActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Button_DeleteRowActionPerformed
    {//GEN-HEADEREND:event_Button_DeleteRowActionPerformed
        deleteRow();
    }//GEN-LAST:event_Button_DeleteRowActionPerformed

    private void Button_WriteDataActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_Button_WriteDataActionPerformed
    {//GEN-HEADEREND:event_Button_WriteDataActionPerformed
        saveChanges();
    }//GEN-LAST:event_Button_WriteDataActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt)//GEN-FIRST:event_formWindowClosing
    {//GEN-HEADEREND:event_formWindowClosing
        if (CHANGES)
        {
            int result = JOptionPane.showConfirmDialog(this, "There are unsaved changes, are you sure you want to exit?", "Thank you for using Sqlator", JOptionPane.YES_NO_OPTION, 2);
            if(result == JOptionPane.YES_OPTION)
            {
                this.setDefaultCloseOperation(this.EXIT_ON_CLOSE);
            }
            else
            {
                this.setDefaultCloseOperation(this.DO_NOTHING_ON_CLOSE);
                return;
            }
        }
        else
        {
            JOptionPane.showMessageDialog(this, "All table changes are saved automatically :)", "Thank you for using Sqlator", JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_formWindowClosing

    private void jMenuItem_NewDatabaseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem_NewDatabaseActionPerformed
    {//GEN-HEADEREND:event_jMenuItem_NewDatabaseActionPerformed
        createNewDatabase(false);
    }//GEN-LAST:event_jMenuItem_NewDatabaseActionPerformed

    private void jMenuItem_OpenDatabaseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem_OpenDatabaseActionPerformed
    {//GEN-HEADEREND:event_jMenuItem_OpenDatabaseActionPerformed
        openDatabase();
    }//GEN-LAST:event_jMenuItem_OpenDatabaseActionPerformed

    private void jMenuItem_ExitActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem_ExitActionPerformed
    {//GEN-HEADEREND:event_jMenuItem_ExitActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_jMenuItem_ExitActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem1ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem1ActionPerformed
        ToolBar_Database.setVisible(!ToolBar_Database.isVisible());
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem2ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem2ActionPerformed
        ToolBar_Table.setVisible(!ToolBar_Table.isVisible());
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem3ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem3ActionPerformed
        ToolBar_TableData.setVisible(!ToolBar_TableData.isVisible());
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem_NewDatabaseFromSQLActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem_NewDatabaseFromSQLActionPerformed
    {//GEN-HEADEREND:event_jMenuItem_NewDatabaseFromSQLActionPerformed
        createNewDatabase(true);
    }//GEN-LAST:event_jMenuItem_NewDatabaseFromSQLActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem4ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem4ActionPerformed
        JDialogAbout about = new JDialogAbout(this, true);
        about.showDialog();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem6ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem6ActionPerformed
        if (Button_NewRow.isEnabled())
            insertRow();
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem7ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem7ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem7ActionPerformed
        if (Button_DeleteRow.isEnabled())
            deleteRow();
    }//GEN-LAST:event_jMenuItem7ActionPerformed

    private void jMenuItem8ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem8ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem8ActionPerformed
        if (Button_WriteData.isEnabled())
            saveChanges();
    }//GEN-LAST:event_jMenuItem8ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem5ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem5ActionPerformed
        try {
            if (Desktop.isDesktopSupported() && Desktop.getDesktop().isSupported(Desktop.Action.BROWSE)) {
            Desktop.getDesktop().browse(new URI("https://gitlab.com/Jovan3211/sqlator"));
            }
        }
        catch (Exception ex)
        {
            JOptionPane.showMessageDialog(this, "Error opening the browser, if you need help go to: https://gitlab.com/Jovan3211/sqlator" , "Error opening default browser", 0);
        }
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem9ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jMenuItem9ActionPerformed
    {//GEN-HEADEREND:event_jMenuItem9ActionPerformed
        jTextField_search.requestFocus();
    }//GEN-LAST:event_jMenuItem9ActionPerformed

    private void jTextField_searchKeyReleased(java.awt.event.KeyEvent evt)//GEN-FIRST:event_jTextField_searchKeyReleased
    {//GEN-HEADEREND:event_jTextField_searchKeyReleased
        DefaultTableModel model = (DefaultTableModel) jTable_DatabaseContent.getModel();
        String search = jTextField_search.getText().toLowerCase();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<DefaultTableModel>(model);
        jTable_DatabaseContent.setRowSorter(sorter);
        
        sorter.setRowFilter(RowFilter.regexFilter(search));
    }//GEN-LAST:event_jTextField_searchKeyReleased

    private boolean checkTableSelected(DefaultMutableTreeNode selectedNode)
    {
        if (selectedNode == null)
            return false;
        
        switch (selectedNode.getDepth())
        {
            case 1:     // selected a table
                return true;
            /*case 2:     // selected a field
                
                break;*/
            default:
                return false;
        }
    }
    
    private void saveChanges()
    {
        Vector<SqlTableField> fields = DataHandler.getFields(WORKING_PATH, SELECTED_TABLE);
        Vector<Vector<Object>> DATA_BEFORE_SAVING = DataHandler.selectAll(WORKING_PATH, SELECTED_TABLE);
        
        for (int row = 0; row < jTable_DatabaseContent.getRowCount(); row++)
        {
            String update_condition = "";
            String where_condition = "WHERE ";
            
            for (int column = 0; column < fields.size(); column++)
            {
                try
                {
                    update_condition += fields.get(column).getName() + " = '" + jTable_DatabaseContent.getValueAt(row, column).toString() + "'";
                }
                catch (NullPointerException ex)
                {
                    update_condition += fields.get(column).getName() + " = NULL";
                }

                try
                {
                    where_condition += fields.get(column).getName() + " = '" + DATA_BEFORE_SAVING.get(row).get(column).toString() + "'";
                }
                catch (NullPointerException ex)
                {
                    where_condition += fields.get(column).getName() + " IS NULL";
                }

                if ((column + 1) < fields.size())
                {
                    update_condition += ", ";
                    where_condition += " AND ";
                }
            }
            
            String result = update_condition + " " + where_condition;
            try
            {
                DataHandler.updateRow(WORKING_PATH, SELECTED_TABLE, result);
                CHANGES = false;
                Label_Status.setText(WORKING_PATH + " - Saved!");
            }
            catch (SQLException ex)
            {
                JOptionPane.showMessageDialog(this, "Error saving data:\n" + ex.getMessage() + "\n\nSaving has been suspended. Any previous rows have been saved to the database." , "Error saving data", 0);
                return;
            }
        }
    }
    
    private void insertRow()
    {
        try
        {
            DataHandler.newRow(WORKING_PATH, SELECTED_TABLE);
        } catch (SQLException e)
        {
            JOptionPane.showMessageDialog(this, "Error creating a new row.\n" + e.getMessage(), "Error", 0);
        }
        
        refreshTableContents(SELECTED_TABLE);
    }
    
    private void deleteRow()
    {
        try
        {
            Vector<SqlTableField> fields = DataHandler.getFields(WORKING_PATH, SELECTED_TABLE);
            
            String condition = "";
            
            for (int i = 0; i < fields.size(); i++)
            {
                try
                {
                    condition += fields.get(i).getName() + " = " + jTable_DatabaseContent.getValueAt(jTable_DatabaseContent.getSelectedRow(), i).toString();
                }
                catch (NullPointerException ex)
                {
                    condition += fields.get(i).getName() + " IS NULL";
                }
            
                if ((i + 1) < fields.size())
                {
                    condition += " AND ";
                }
            }
            
            jTable_DatabaseContent.getSelectedRow();
         
            DataHandler.deleteRow(WORKING_PATH, SELECTED_TABLE, condition);
            
            DefaultTableModel model = (DefaultTableModel) jTable_DatabaseContent.getModel();
            int selected = jTable_DatabaseContent.getSelectedRow();
            if (selected < 0)
                return;
            model.removeRow(selected);
        }
        catch (Exception e)
        {
            JOptionPane.showMessageDialog(this, "Error deleting row.\n" + e.getMessage(), "Error", 0);
        }
    }
    
    private void createNewDatabase(boolean fromSql)
    {
        //Create a new dialog that gets user input for the location of the new database
        //TODO: Handle when exits out of the dialog
        String path;
        boolean result = false;
        
        if (fromSql)
        {
            JDialogNewDatabaseFromSql dialog = new JDialogNewDatabaseFromSql(this, true);
            path = dialog.showDialog();
        }
        else
        {
            JDialogNewDatabase dialog = new JDialogNewDatabase(this, true);
            path = dialog.showDialog();
        }
        
        if (path == "false")
            return;
        else
            result = true;
                
        if (!fromSql)
            result = DataHandler.createNewDatabase(path);
        String reply;
        
        if (result)
        {
            WORKING_PATH = path;
            
            if (fromSql)
            {
                openDatabase(path);
                return;
            }
            JDialogNewTable newTableForm = new JDialogNewTable(this, true, WORKING_PATH, false, null);
            newTableForm.showDialog();
            openDatabase(path);
        }
        else
        {
            reply = "Error creating database.";
            JOptionPane.showMessageDialog(this, reply);
        }
    }
    
    private void openDatabase()
    {
        closeDatabase();
        
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Database files", "db", "sqlite file");
        fileChooser.setFileFilter(filter);
        fileChooser.setDialogTitle("Select database");
        
        if (fileChooser.showDialog(this, "Select database") == JFileChooser.APPROVE_OPTION)
        {
            openDatabase(fileChooser.getSelectedFile().toString());
        }        
    }
    
    private void openDatabase(String path)
    {
        WORKING_PATH = path;
        
        if (!fillTableView())
        {
            JOptionPane.showMessageDialog(this, "Error opening the database.\nThe database is either corrupted or the file type is not supported", "Error opening database", 0);
            closeDatabase();
            return;
        }
        
        Label_Status.setText(path);
        Button_CloseDatabase.setEnabled(true);
        Button_NewTable.setEnabled(true);
        Button_ModifyTable.setEnabled(true);
        Button_deleteTable.setEnabled(true);
    }
    
    private void closeDatabase()
    {
        WORKING_PATH = null;

        clearTableView();
        clearTableContents();

        Label_Status.setText(null);
        Button_CloseDatabase.setEnabled(false);
        Button_NewTable.setEnabled(false);
        Button_ModifyTable.setEnabled(false);
        Button_deleteTable.setEnabled(false);
        
        DefaultTreeModel model = (DefaultTreeModel) Tree_Table.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();

        root.setUserObject("Open a database");
    }
    
    /**
     * Fills the JTable with the contents of the selected table
     */
    private void fillTableContents(String tableName)
    {
        SELECTED_TABLE = tableName;
        
        Vector<Vector<Object>> tableContent = DataHandler.selectAll(WORKING_PATH, tableName);
        Vector<SqlTableField> fields = DataHandler.getFields(WORKING_PATH, tableName);
        
        //turn all of sqltablefield.name into string vector of field names
        Vector<String> fieldNames = new Vector<>();
        fields.forEach((field) -> fieldNames.add(field.getName()));
        
        JTable table = new JTable(tableContent, fieldNames);
        jTable_DatabaseContent.setModel(table.getModel());
        jTable_DatabaseContent.getModel().addTableModelListener((TableModelEvent e) ->
        {
            if (e.getColumn() > -1 && !CHANGES)
            {
                handleTableCellValueChange();
            }
        });
        
        Button_NewRow.setEnabled(true);
        Button_DeleteRow.setEnabled(true);
        Button_WriteData.setEnabled(true);
    }
    
    private void refreshTableContents(String tableName)
    {
        jTable_DatabaseContent.setModel(new DefaultTableModel());
        
        Vector<Vector<Object>> tableContent = DataHandler.selectAll(WORKING_PATH, tableName);
        Vector<SqlTableField> fields = DataHandler.getFields(WORKING_PATH, tableName);
        
        //turn all of sqltablefield.name into string vector of field names
        Vector<String> fieldNames = new Vector<>();
        fields.forEach((field) -> fieldNames.add(field.getName()));
        
        JTable table = new JTable(tableContent, fieldNames);
        jTable_DatabaseContent.setModel(table.getModel());
    }
    
    private void clearTableContents()
    {
        jTable_DatabaseContent.setModel(new DefaultTableModel());
        
        Button_NewRow.setEnabled(false);
        Button_DeleteRow.setEnabled(false);
        Button_WriteData.setEnabled(false);
    }
    
    /**
     * Fills the JTree with a preview of the open databases tables and columns
     */
    private boolean fillTableView()
    {
        DefaultTreeModel model = (DefaultTreeModel) Tree_Table.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
        root.removeAllChildren();
        
        Path tempPath = Paths.get(WORKING_PATH);
        Path fileName = tempPath.getFileName();
        root.setUserObject(fileName.toString());
        
        ArrayList<String> tableNames = DataHandler.getTableNames(WORKING_PATH);
        
        if (tableNames == null)
            return false;
        
        for (int i = 0; i < tableNames.size(); i++)
        {
            DefaultMutableTreeNode tableNameNode = new DefaultMutableTreeNode(tableNames.get(i));
            model.insertNodeInto(tableNameNode, root, root.getChildCount());
           
            Vector<SqlTableField> fields = DataHandler.getFields(WORKING_PATH, tableNames.get(i));
            for (int j = 0; j < fields.size(); j++)
            {
                model.insertNodeInto(new DefaultMutableTreeNode(fields.get(j).getName()), tableNameNode, tableNameNode.getChildCount());
            }
        }
        
        model.reload();
        return true;
    }
    
    private void handleTableCellValueChange()
    {
        CHANGES = true;
        Label_Status.setText(WORKING_PATH + " - Unsaved table changes");
    }
    
    /**
     * Clears the JTree of its contents
     */
    private void clearTableView()
    {
        DefaultTreeModel model = (DefaultTreeModel) Tree_Table.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
        root.removeAllChildren();
        model.reload();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Button_CloseDatabase;
    private javax.swing.JButton Button_DeleteRow;
    private javax.swing.JButton Button_ModifyTable;
    private javax.swing.JButton Button_NewDatabase;
    private javax.swing.JButton Button_NewRow;
    private javax.swing.JButton Button_NewTable;
    private javax.swing.JButton Button_OpenDatabase;
    private javax.swing.JButton Button_WriteData;
    private javax.swing.JButton Button_deleteTable;
    private javax.swing.JLabel Label_Status;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JPanel Panel_WorkArea;
    private javax.swing.JToolBar ToolBar_Database;
    private javax.swing.JToolBar ToolBar_Table;
    private javax.swing.JToolBar ToolBar_TableData;
    private javax.swing.JTree Tree_Table;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JMenuItem jMenuItem8;
    private javax.swing.JMenuItem jMenuItem9;
    private javax.swing.JMenuItem jMenuItem_Exit;
    private javax.swing.JMenuItem jMenuItem_NewDatabase;
    private javax.swing.JMenuItem jMenuItem_NewDatabaseFromSQL;
    private javax.swing.JMenuItem jMenuItem_OpenDatabase;
    private javax.swing.JMenu jMenu_File;
    private javax.swing.JMenu jMenu_Help;
    private javax.swing.JMenu jMenu_View;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator10;
    private javax.swing.JToolBar.Separator jSeparator11;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JToolBar.Separator jSeparator9;
    private javax.swing.JTable jTable_DatabaseContent;
    private javax.swing.JTextField jTextField_search;
    private javax.swing.JPanel statusBar;
    // End of variables declaration//GEN-END:variables
}
